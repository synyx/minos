#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:hera="http://schemas.synyx.org/hera"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:module="http://schemas.synyx.org/minos/module"
       xsi:schemaLocation="http://schemas.synyx.org/hera http://schemas.synyx.org/hera/hera.xsd
                           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
                           http://schemas.synyx.org/minos/module http://schemas.synyx.org/minos/module/minos-module.xsd">

    <!-- Configuration of the included DAO abstraction "Hades" is put into its own config file -->
    <import resource="dao-context.xml" />


    <!--
	The following lines configure the lifecycle instance for your Minos application. Lifecycles
	describe code to run on startup, shutdown and installation of a particular Minos module. For
	an application this is a good place to configure a product for its particular runtime environment.

	Every Minos module - and an application is just another kind of module - has a unique identifier.
	This identifier is used on several occasions, like resolution of message properties via a common
	prefix or, as in the example below, to name dependencies to other Minos modules.
    -->
    <bean id="sampleLifecycle" class="${package}.SampleLifecycle">
    	<constructor-arg ref="itemDao" />
    	<constructor-arg ref="userManagement" />
    </bean>

    <module:module id="items" base-package="${package}" depends-on="umt"
                   lifecycle-ref="sampleLifecycle" auto-config="false" />

    <bean class="org.synyx.minos.core.message.ModuleMessageSourceImpl">
	<!--
	    For message property resolution to work, Spring needs a configured message source. Since Minos is
	    modular in its design, every module declares a ModuleMessageSource. These various message sources are
	    then picked up by a special dispatcher source, which is preconfigured in the Minos core, and handles
	    message property resolution according to the above mentioned prefix mechanism.

	    To keep this example a bit more flexible, this modules message source is configured for lenient lookup
	    of messages, meaning it does not necessarily depend on every message being correctly prefixed, but also
	    looks up the used keys directly.
        -->
        <constructor-arg ref="items" />
        <property name="lenient" value="true" />
    </bean>

	<!-- Services -->
	<bean class="${package}.service.ClockService" />

	<!-- Custom permissions, scanned from a class with String constants. -->
	<bean class="org.synyx.minos.core.security.SimpleConstantsPermissionAware">
		<constructor-arg>
			<list>
				<value>${package}.SamplePermissions</value>
			</list>
		</constructor-arg>
	</bean>
</beans>
